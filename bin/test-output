#!/usr/bin/perl -w -I. -I..

=head1 NAME

test-output - Output a report of our test suite.

=head1 SYNOPSIS

  test-output [options]

  General Options:
   --input      Specify the directory containing our test cases.
   --output     Specify the HTML output file to write to.

  Help Options:
   --help       Show this scripts help information.
   --manual     Read this scripts manual.
   --verbose    Show progress.
   --version    Show the version number and exit.


=head1 OPTIONS

=over 8

=item B<--help>
Show the scripts help information.

=item B<--input>
Specify the input directory containing tests to execute.

=item B<--manual>
Read the manual.

=item B<--output>
Specify the HTML file to write to.

=item B<--verbose>
Show sending progress.

=item B<--version>
Show the version number and exit.

=back


=head1 DESCRIPTION

  This script will create a nicely formatted HTML report of the
 execution of all our test cases.

  Each test script beneath tests/ will be executed in turn and
 a summery HTML file created with the results.

=cut

=head1 AUTHOR


 Steve
 --
 http://www.steve.org.uk/

 $Id: test-output,v 1.3 2007-02-05 07:04:47 steve Exp $

=cut


use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use Test::TAP::HTMLMatrix;
use Test::TAP::Model::Visual;


#
#  Our configuration values.
#
my %CONFIG;



#
#  Parse our command line arguments.
#
parseCommandLineArguments();


#
#  Make sure we received a starting directory.
#
if ( !$CONFIG{'input'} )
{
    if ( -d "tests/" )
    {
        $CONFIG{'input'} = "tests";

        # Setup default output if that is missing too.
        $CONFIG{'output'} = "test-output.html" if ( ! $CONFIG{'output'} );
    }

    if ( -d "../tests/" )
    {
        $CONFIG{'input'} = "../tests";

        # Setup default output if that is missing too.
        $CONFIG{'output'} = "../test-output.html" if ( ! $CONFIG{'output'} );
    }
}


#
#  Makes sure we got both an input and an output
#
if ( ( ! $CONFIG{'input'} ) || ( !$CONFIG{'output'} ) )
{
    print "Arguments missing\n";
    exit;
}


#
#  Create the test object.
#
my $model = Test::TAP::Model::Visual->new_with_tests(glob( $CONFIG{'input'} . "/*.t"));

open STDOUT, ">", $CONFIG{'output'}
  or die "Cannot open output file : $!";


#
#  Run the matrix.
#
my $v = Test::TAP::HTMLMatrix->new($model);
$v->has_inline_css(1);
print "$v";

#
#  All done.
#
exit;



=begin doc

  Parse the arguments specified upon the command line.

=end doc

=cut

sub parseCommandLineArguments
{
    my $HELP    = 0;
    my $MANUAL  = 0;
    my $VERSION = 0;

    #
    #  Parse the options we accept
    #
    GetOptions(
               "help",      \$HELP,
               "input=s",   \$CONFIG{'input'},
               "output=s",  \$CONFIG{'output'},
               "manual",    \$MANUAL,
               "verbose",   \$CONFIG{'verbose'},
               "version",   \$VERSION,
             );

    pod2usage(1) if $HELP;
    pod2usage(-verbose => 2 ) if $MANUAL;

    if ( $VERSION )
    {
        my $REVISION      = '$Revision: 1.3 $';
        if ( $REVISION =~ /1.([0-9.]+) / )
        {
            $REVISION = $1;
        }

        print "CVS Revision: $REVISION\n";
        exit;
    }
}
