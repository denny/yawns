#!/usr/bin/perl -w -I. -I..

=head1 NAME

broadcast-message - Send a site-message to all registered users.

=head1 SYNOPSIS

  broadcast-message [options]

  General Options:
   --file     Specify the file containing the message to send.

  Help Options:
   --help     Show this scripts help information.
   --manual   Read this scripts manual.
   --verbose  show sending progress.
   --version  Show the version number and exit.


=head1 OPTIONS

=over 8

=item B<--file>
Specify the file containing the message to broadcast.

=item B<--help>
Show the scripts help information.

=item B<--manual>
Read the manual.

=item B<--verbose>
Show sending progress.

=item B<--version>
Show the version number and exit.

=back


=head1 DESCRIPTION

  broadcast-message is a simple script to insert the contents
 of a specified file as a new message for each registered 
 user.

=cut

=head1 TODO

  It should be possible to specify a message upon the command
 line.

=cut


=head1 AUTHOR


 Steve
 --
 http://www.steve.org.uk/

 $Id: broadcast-message,v 1.3 2007-02-04 16:59:49 steve Exp $

=cut


use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use Singleton::DBI;
use Yawns::Messages;


#
#  Options.
#
my %CONFIG;
$CONFIG{'verbose'} = 0;


#
#  Parse our command line arguments
#
parseCommandLineArguments();


#
#  Make sure we have a file to send.
#
if ( defined( $CONFIG{'file'} ) )
{
    if ( ! -e $CONFIG{'file'} )
    {
        print "The specified file does not exist\n";
        exit;
    }
}
else
{
    print "Filename is a required argument.  Use --help for help\n";
    exit;
}


#
#  Read it
#
my $text = `cat $CONFIG{'file'}`;


#
#  Get database handle
#
my $dbi = Singleton::DBI->instance();

#
#  Message sending object.
#
my $msg   = Yawns::Messages->new( username => "Steve" );

#
#  Find our users.
#
my $sql = $dbi->prepare( "SELECT username FROM users" );
$sql->execute() or die $dbi->errstr();

#
#  Bind the result
#
my $username;
$sql->bind_columns( undef, \$username );



#
#
#
while( $sql->fetch() )
{
    #
    #  Show progress.
    #
    $CONFIG{'verbose'} && print "Sending : $username\n";

    #
    #  Send the message
    #
    $msg->send( to => $username, body => $text );
}

#
#  Cleanup
#
$sql->finish();
$dbi->disconnect();




=begin doc

  Parse the arguments specified upon the command line.

=end doc

=cut

sub parseCommandLineArguments
{
    my $HELP    = 0;
    my $MANUAL  = 0;
    my $VERSION = 0;

    #
    #  Parse the options we accept
    #
    GetOptions(
               "file=s",     \$CONFIG{'file'},
               "help",       \$HELP,
               "manual",     \$MANUAL,
               "verbose",    \$CONFIG{'verbose'},
               "version",    \$VERSION,
             );

    pod2usage(1) if $HELP;
    pod2usage(-verbose => 2 ) if $MANUAL;


    if ( $VERSION )
    {
        my $REVISION      = '$Revision: 1.3 $';
        if ( $REVISION =~ /1.([0-9.]+) / )
        {
            $REVISION = $1;
        }

        print "CVS Revision: $REVISION\n";
        exit;
    }
}
