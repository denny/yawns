#!/usr/bin/perl -w -I. -I..

=head1 NAME

make-admin - Create a site-wide administrative user.

=head1 SYNOPSIS

  make-admin [options]

  General Options:
   --username   Specify the user to promote.

  Help Options:
   --help       Show this scripts help information.
   --manual     Read this scripts manual.
   --verbose    Show progress.
   --version    Show the version number and exit.


=head1 OPTIONS

=over 8

=item B<--help>
Show the scripts help information.

=item B<--manual>
Read the manual.

=item B<--username>
Specify the username to promote.

=item B<--verbose>
Show sending progress.

=item B<--version>
Show the version number and exit.

=back


=head1 DESCRIPTION

  This script will promote the named user to a complete site-wide
 administrator.

  This works by deleting all permissions which the user has, then
 re-adding all of the currently defined administrative permissions.

  If new site-permission types are defined this process will ensure
 the user is up-to-date.

=cut

=head1 AUTHOR


 Steve
 --
 http://www.steve.org.uk/

 $Id: make-admin,v 1.3 2007-02-05 06:45:37 steve Exp $

=cut


use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use Yawns::Permissions;


#
# Default options, which may be overridden by command line
# arguments.
#
my %CONFIG;
$CONFIG{ 'directory' } = '';


#
#  Parse our command line arguments.
#
parseCommandLineArguments();


#
#  Make sure we received a user.
#
if ( !$CONFIG{ 'username' } )
{
    print "Username is mandatory\n";
    exit;
}


#
#  Work with the permissions object.
#
my $perms = Yawns::Permissions->new();

# If they have existing permissions remove them.
$perms->removeAllPermissions( $CONFIG{ 'username' } );

# Now make them a global administrator.
$perms->makeAdmin( $CONFIG{ 'username' } );

$CONFIG{ 'verbose' } && print "Promoted: $CONFIG{'username'}\n";




=begin doc

  Parse the arguments specified upon the command line.

=end doc

=cut

sub parseCommandLineArguments
{
    my $HELP    = 0;
    my $MANUAL  = 0;
    my $VERSION = 0;

    #
    #  Parse the options we accept
    #
    GetOptions( "username=s", \$CONFIG{ 'username' },
                "help",       \$HELP,
                "manual",     \$MANUAL,
                "verbose",    \$CONFIG{ 'verbose' },
                "version",    \$VERSION,
              );

    pod2usage(1) if $HELP;
    pod2usage( -verbose => 2 ) if $MANUAL;

    if ($VERSION)
    {
        my $REVISION = '$Revision: 1.3 $';
        if ( $REVISION =~ /1.([0-9.]+) / )
        {
            $REVISION = $1;
        }

        print "CVS Revision: $REVISION\n";
        exit;
    }
}
