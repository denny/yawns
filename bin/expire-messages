#!/usr/bin/perl -w -Ilib/ -I../lib/

=head1 NAME

expire-messages - Delete old site-messages which have been read.

=head1 SYNOPSIS

  expire-messages [options]

  General Options:
   --days      Specify the retention age of messages.

  Help Options:
   --help       Show this scripts help information.
   --manual     Read this scripts manual.
   --verbose    Show progress.
   --version    Show the version number and exit.


=head1 OPTIONS

=over 8

=item B<--days>
Specify the number of days read messages are kept for, defaults to 30.

=item B<--help>
Show the scripts help information.

=item B<--manual>
Read the manual.

=item B<--verbose>
Show sending progress.

=item B<--version>
Show the version number and exit.

=back


=head1 DESCRIPTION

  This script will permanently delete any site-messages upon the
 site which have been read, and which are older than a given number
 of days.

  This is useful to avoid needlessly storing messages.

=cut


=head1 AUTHOR

 Steve
 --
 http://www.steve.org.uk/

 $Id: expire-messages,v 1.3 2007-02-04 01:46:19 steve Exp $

=cut


use Getopt::Long;
use Pod::Usage;
use Singleton::DBI;
use Yawns::Messages;



#
# Default options, which may be overridden by command line
# arguments.
#
my %CONFIG;
$CONFIG{'days'}    = 30;
$CONFIG{'verbose'} = 0;


#
#  Process our command line arguments
#
parseCommandLineArguments();



#
#  Get database handle
#
my $dbi = Singleton::DBI->instance();

#
#  Find our users.
#
my $sql = $dbi->prepare( "SELECT username FROM users" );
$sql->execute() or die $dbi->errstr();

#
#  Bind the result
#
my $username;
$sql->bind_columns( undef, \$username );



#
#
#
while( $sql->fetch() )
{
    #
    #  Delete the old messages
    #
    $CONFIG{'verbose'} && print "Deleting messages for $username\n";
    my $msg = Yawns::Messages->new( username => $username );
    $msg->deleteOldMessages( $CONFIG{'days'} );
}

#
#  Cleanup
#
$sql->finish();
$dbi->disconnect();




=begin doc

  Parse the arguments specified upon the command line.

=end doc

=cut

sub parseCommandLineArguments
{
    my $HELP    = 0;
    my $MANUAL  = 0;
    my $VERSION = 0;

    #
    #  Parse the options we accept
    #
    GetOptions(
               "days=s",  \$CONFIG{'days'},
               "help",    \$HELP,
               "manual",  \$MANUAL,
               "verbose", \$CONFIG{'verbose'},
               "version",  \$VERSION,
             );

    pod2usage(1) if $HELP;
    pod2usage(-verbose => 2 ) if $MANUAL;

    if ( $VERSION )
    {
        my $REVISION      = '$Revision: 1.3 $';
        if ( $REVISION =~ /1.([0-9.]+) / )
        {
            $REVISION = $1;
        }

        print "CVS Revision: $REVISION\n";
        exit;
    }
}
