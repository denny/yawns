#!/usr/bin/perl -w -I../lib/ -I./lib/

=head1 NAME

gen-feeds - Produce new XML + RSS feeds.

=head1 SYNOPSIS

  gen-feeds [options]

  Help Options:
   --help     Show this scripts help information.
   --manual   Read this scripts manual.
   --version  Show the version number and exit.


=head1 OPTIONS

=over 8

=item B<--help>
Show the help information.

=item B<--manual>
Read the manual.

=item B<--version>
Show the version number and exit.

=back


=head1 DESCRIPTION

This script regenerates the static RSS and XML feeds which are
served for our recent articles.

Other feeds such as "recent comments", "recently reported comments",
etc, are generated dynamically so they don't get affected by this
script.

=cut

=head1 AUTHOR

Steve
--
http://www.steve.org.uk/

=cut


use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;

use Yawns::RSS;


#
#  Options.
#
my %CONFIG;


#
#  Parse our command line arguments
#
parseCommandLineArguments();


#
#  Find our home directory.
#
my $login = getlogin || getpwuid($<);
my ( undef, undef, undef, undef, undef, undef, undef, $home, undef, undef ) =
  getpwnam($login);

#
#  Get the filenames we output, and the current hash of their contents.
#
my %HASH1;

$HASH1{ 'articles' }  = hashFile( $home . "/current/htdocs/articles.rdf" );
$HASH1{ 'headlines' } = hashFile( $home . "/current/htdocs/headlines.rdf" );


#
#  Generate the feeds.
#
my $feeds = Yawns::RSS->new();
$feeds->output();


#
#  Now re-hash the files - so we can see if the feed contents changed.
#
my %HASH2;

$HASH2{ 'articles' }  = hashFile( $home . "/current/htdocs/articles.rdf" );
$HASH2{ 'headlines' } = hashFile( $home . "/current/htdocs/headlines.rdf" );


#
#  If the hashes differ then we should send an alert.
#
my $alerted = 0;

#
#  NOTE: We don't care about atom.xml here, because the timestamps
# will cause each entry to differ on each run.
#
foreach my $key (qw! articles headlines !)
{
    if ( ( $HASH1{ $key } ne $HASH2{ $key } ) &&
         ( $alerted == 0 ) )
    {

        # get our hostname
        my $host = `hostname`;
        chomp($host);

        # avoid multiple alerts.
        $alerted += 1;
    }
}




=begin doc

Parse the arguments specified upon the command line.

=end doc

=cut

sub parseCommandLineArguments
{
    my $HELP    = 0;
    my $MANUAL  = 0;
    my $VERSION = 0;

    #
    #  Parse the options we accept
    #
    GetOptions( "help", \$HELP, "manual", \$MANUAL, "version", \$VERSION, );

    pod2usage(1) if $HELP;
    pod2usage( -verbose => 2 ) if $MANUAL;

    if ($VERSION)
    {
        my $REVISION = '$Revision: 1.6 $';
        if ( $REVISION =~ /1.([0-9.]+) / )
        {
            $REVISION = $1;
        }

        print "CVS Revision: $REVISION\n";
        exit;
    }
}


=begin doc

Hash the contents of the named file.

=end doc

=cut

sub hashFile
{
    my ($file) = (@_);

    my $hash = undef;

    foreach my $module (qw! Digest::SHA Digest::SHA1 !)
    {

        # If we succeeded in calculating the hash we're done.
        next if ( defined($hash) );

        # Attempt to load the module
        my $eval = "use $module;";

        ## no critic (Eval)
        eval($eval);
        ## use critic

        #
        #  Loaded module, with no errors.
        #
        if ( !$@ )
        {
            my $object = $module->new;

            open my $handle, "<", $file or
              return "Failed to read $file to hash contents with $module - $!";
            $object->addfile($handle);
            close($handle);

            $hash = $object->hexdigest();
        }
    }

    unless ( defined $hash )
    {
        die "Failed to calculate hash of $file - internal error.";
    }

    return ($hash);
}
