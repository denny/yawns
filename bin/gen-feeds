#!/usr/bin/perl -w -I../lib/ -I./lib/

=head1 NAME

gen-feeds - Produce new XML + RSS feeds.

=head1 SYNOPSIS

  gen-feeds [options]

  Help Options:
   --help     Show this scripts help information.
   --manual   Read this scripts manual.
   --version  Show the version number and exit.


=head1 OPTIONS

=over 8

=item B<--help>
Show the scripts help information.

=item B<--manual>
Read the manual.

=item B<--version>
Show the version number and exit.

=back


=head1 DESCRIPTION

  This script regenerates the static RSS and XML feeds which are
 served for our recent articles.

  Other feeds such as "recent comments", "recently reported comments",
 etc, are generated dynamically so they don't get affected by this
 scrpit.

=cut

=head1 AUTHOR

 Steve
 --
 http://www.steve.org.uk/

 $Id: gen-feeds,v 1.6 2007-02-04 15:59:45 steve Exp $

=cut


use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use Yawns::RSS;


#
#  Options.
#
my %CONFIG;


#
#  Parse our command line arguments
#
parseCommandLineArguments();



#
#  Generate the feeds.
#
my $feeds = Yawns::RSS->new();
$feeds->output();


=begin doc

  Parse the arguments specified upon the command line.

=end doc

=cut

sub parseCommandLineArguments
{
    my $HELP    = 0;
    my $MANUAL  = 0;
    my $VERSION = 0;

    #
    #  Parse the options we accept
    #
    GetOptions(
               "help",       \$HELP,
               "manual",     \$MANUAL,
               "version",    \$VERSION,
             );

    pod2usage(1) if $HELP;
    pod2usage(-verbose => 2 ) if $MANUAL;

    if ( $VERSION )
    {
        my $REVISION      = '$Revision: 1.6 $';
        if ( $REVISION =~ /1.([0-9.]+) / )
        {
            $REVISION = $1;
        }

        print "CVS Revision: $REVISION\n";
        exit;
    }
}

